{"version":3,"sources":["DataStreamer.ts","DataManipulator.ts","Graph.tsx","App.tsx","index.tsx"],"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send","DataManipulator","Object","classCallCheck","this","createClass","key","value","serverResponds","priceABC","top_ask","price","top_bid","priceDEF","ratio","price_abc","price_def","timestamp","upper_bound","lower_bound","trigger_alert","undefined","Graph","table","React","createElement","elem","document","getElementsByTagName","window","perspective","worker","load","setAttribute","stringify","update","generateRow","props","data","Component","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","showGraph","react_default","a","src_Graph_0","_this2","x","interval","setInterval","getData","setState","clearInterval","_this3","className","onClick","getDataFromServer","renderGraph","ReactDOM","render","src_App_0","getElementById"],"mappings":"sOAWMA,uGAGWC,GACb,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOJ,EAAaK,SAAS,GAE1CH,EAAQI,OAAS,WACQ,MAAnBJ,EAAQK,OACVN,EAASO,KAAKC,MAAMP,EAAQQ,eAE5BC,MAAO,mBAIXT,EAAQU,gBAfNZ,EACGK,QAAkB,mCAkBZL,QCjBFa,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAA,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,OAAAK,IAAA,cAAAC,MAAA,SACqBC,GACjB,IAAMC,GAAYD,EAAe,GAAGE,QAAQC,MAAQH,EAAe,GAAGI,QAAQD,OAAS,EACjFE,GAAYL,EAAe,GAAGE,QAAQC,MAAQH,EAAe,GAAGI,QAAQD,OAAS,EACjFG,EAAQL,EAAWI,EAGzB,MAAO,CACLE,UAAWN,EACXO,UAAWH,EACXC,QACAG,UAAWT,EAAe,GAAGS,UAAYT,EAAe,GAAGS,UACzDT,EAAe,GAAGS,UAAYT,EAAe,GAAGS,UAClDC,YARiB,KASjBC,YARiB,IASjBC,cAAgBN,EAVC,MAUqBA,EATrB,IAS2CA,OAAQO,OAf1EpB,EAAA,GCmDeqB,oNAlDbC,qFAGE,OAAOC,IAAMC,cAAc,kEAK3B,IAAMC,EAAOC,SAASC,qBAAqB,sBAAsB,GAY7DC,OAAOC,aAAeD,OAAOC,YAAYC,WAC3C3B,KAAKmB,MAAQM,OAAOC,YAAYC,SAASR,MAX5B,CACbR,UAAW,QACXC,UAAW,QACXF,MAAO,QACPG,UAAW,OACXC,YAAa,QACbC,YAAa,QACbC,cAAe,WAMbhB,KAAKmB,QAEPG,EAAKM,KAAK5B,KAAKmB,OACfG,EAAKO,aAAa,OAAQ,UAC1BP,EAAKO,aAAa,aAAc,iBAChCP,EAAKO,aAAa,UAAW,yDAC7BP,EAAKO,aAAa,aAAcrC,KAAKsC,UAAU,CAC7CnB,UAAW,MACXC,UAAW,MACXF,MAAO,MACPG,UAAW,iBACXC,YAAa,MACbC,YAAa,MACbC,cAAe,uDAMfhB,KAAKmB,OACPnB,KAAKmB,MAAMY,OAAO,CAChBlC,EAAgBmC,YAAYhC,KAAKiC,MAAMC,eA7C3BC,cC6CLC,qBA/Cb,SAAAA,EAAYH,GAAW,IAAAI,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACrBC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAAsC,GAAAI,KAAAxC,KAAMiC,KACDQ,MAAQ,CACXP,KAAM,GACNQ,WAAW,GAJQL,6EASrB,GAAIrC,KAAKyC,MAAMC,UACb,OAAQC,EAAAC,EAAAvB,cAACwB,EAAD,CAAOX,KAAMlC,KAAKyC,MAAMP,mDAIhB,IAAAY,EAAA9C,KACd+C,EAAI,EACFC,EAAWC,YAAY,WAC3BjE,EAAakE,QAAQ,SAAC9C,GACpB0C,EAAKK,SAAS,CACZjB,KAAM9B,EACNsC,WAAW,QAGfK,EACQ,KACNK,cAAcJ,IAEf,sCAGI,IAAAK,EAAArD,KACP,OACE2C,EAAAC,EAAAvB,cAAA,OAAKiC,UAAU,OACbX,EAAAC,EAAAvB,cAAA,UAAQiC,UAAU,cAAlB,0BAGAX,EAAAC,EAAAvB,cAAA,OAAKiC,UAAU,eACbX,EAAAC,EAAAvB,cAAA,UAAQiC,UAAU,gCAAgCC,QAAS,WAAOF,EAAKG,sBAAvE,wBACAb,EAAAC,EAAAvB,cAAA,OAAKiC,UAAU,SACZtD,KAAKyD,wBAxCAtB,0BCAlBuB,IAASC,OAAOhB,EAAAC,EAAAvB,cAACuC,EAAD,MAASrC,SAASsC,eAAe","file":"static/js/main.1b7d3e80.chunk.js","sourcesContent":["export interface Order {\n  price: number,\n  size: number,\n}\nexport interface ServerRespond {\n  stock: string,\n  top_bid: Order,\n  top_ask: Order,\n  timestamp: Date,\n}\n\nclass DataStreamer {\n  static API_URL: string = 'http://localhost:8080/query?id=1';\n\n  static getData(callback: (data: ServerRespond[]) => void): void {\n    const request = new XMLHttpRequest();\n    request.open('GET', DataStreamer.API_URL, false);\n\n    request.onload = () => {\n      if (request.status === 200) {\n        callback(JSON.parse(request.responseText));\n      } else {\n        alert ('Request failed');\n      }\n    }\n\n    request.send();\n  }\n}\n\nexport default DataStreamer;","import { ServerRespond } from './DataStreamer';\n\nexport interface Row {\n  price_abc: number,\n  price_def: number,\n  ratio: number,\n  timestamp: Date,\n  upper_bound: number,\n  lower_bound: number,\n  trigger_alert: number | undefined,\n}\n\n\nexport class DataManipulator {\n  static generateRow(serverResponds: ServerRespond[]): Row {\n    const priceABC = (serverResponds[0].top_ask.price + serverResponds[0].top_bid.price) / 2;\n    const priceDEF = (serverResponds[1].top_ask.price + serverResponds[1].top_bid.price) / 2;\n    const ratio = priceABC / priceDEF;\n    const upperBound = 1.01;\n    const lowerBound = 0.99;\n    return {\n      price_abc: priceABC,\n      price_def: priceDEF,\n      ratio,\n      timestamp: serverResponds[0].timestamp > serverResponds[1].timestamp ?\n        serverResponds[0].timestamp : serverResponds[1].timestamp,\n      upper_bound: upperBound,\n      lower_bound: lowerBound,\n      trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,\n      };\n    }\n  }\n\n","import React, { Component } from 'react';\nimport { Table } from '@jpmorganchase/perspective';\nimport { ServerRespond } from './DataStreamer';\nimport { DataManipulator } from './DataManipulator';\nimport './Graph.css';\n\ninterface IProps {\n  data: ServerRespond[],\n}\n\ninterface PerspectiveViewerElement extends HTMLElement {\n  load: (table: Table) => void,\n}\nclass Graph extends Component<IProps, {}> {\n  table: Table | undefined;\n\n  render() {\n    return React.createElement('perspective-viewer');\n  }\n\n  componentDidMount() {\n    // Get element from the DOM.\n    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\n\n    const schema = {\n      price_abc: 'float',\n      price_def: 'float',\n      ratio: 'float',\n      timestamp: 'date',\n      upper_bound: 'float',\n      lower_bound: 'float',\n      trigger_alert: 'float',\n    };\n\n    if (window.perspective && window.perspective.worker()) {\n      this.table = window.perspective.worker().table(schema);\n    }\n    if (this.table) {\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\n      elem.load(this.table);\n      elem.setAttribute('view', 'y_line');\n      elem.setAttribute('row-pivots', '[\"timestamp\"]');\n      elem.setAttribute('columns', '[\"ratio\",\"lower_bound\",\"upper_bound\",\"trigger_alert\"]');\n      elem.setAttribute('aggregates', JSON.stringify({\n        price_abc: 'avg',\n        price_def: 'avg',\n        ratio: 'avg',\n        timestamp: 'distinct count',\n        upper_bound: 'avg',\n        lower_bound: 'avg',\n        trigger_alert: 'avg',\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.table) {\n      this.table.update([\n        DataManipulator.generateRow(this.props.data),\n      ]);\n    }\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport DataStreamer, { ServerRespond } from './DataStreamer';\nimport Graph from './Graph';\nimport './App.css';\n\ninterface IState {\n  data: ServerRespond[],\n  showGraph: boolean,\n}\n\nclass App extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      data: [],\n      showGraph: false,\n    };\n  }\n\n  renderGraph() {\n    if (this.state.showGraph) {\n      return (<Graph data={this.state.data}/>)\n    }\n  }\n\n  getDataFromServer() {\n    let x = 0;\n    const interval = setInterval(() => {\n      DataStreamer.getData((serverResponds: ServerRespond[]) => {\n        this.setState({\n          data: serverResponds,\n          showGraph: true,\n        });\n      });\n      x++;\n      if (x > 1000) {\n        clearInterval(interval);\n      }\n    }, 100);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Bank Merge & Co Task 3\n        </header>\n        <div className=\"App-content\">\n          <button className=\"btn btn-primary Stream-button\" onClick={() => {this.getDataFromServer()}}>Start Streaming Data</button>\n          <div className=\"Graph\">\n            {this.renderGraph()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\ndeclare global {\n  interface Window { perspective: any; }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}