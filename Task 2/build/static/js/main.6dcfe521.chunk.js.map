{"version":3,"sources":["DataStreamer.ts","Graph.tsx","App.tsx","index.tsx"],"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send","Graph","table","React","createElement","elem","document","getElementsByTagName","window","perspective","worker","this","stock","top_ask_price","top_bid_price","timestamp","load","update","props","data","map","el","top_ask","price","top_bid","Component","App","state","getData","serverResponds","setState","className","onClick","getDataFromServer","renderGraph","ReactDOM","render","getElementById"],"mappings":"kTAeMA,E,qGAQWC,GACb,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOJ,EAAaK,SAAS,GAE1CH,EAAQI,OAAS,WACQ,MAAnBJ,EAAQK,OACVN,EAASO,KAAKC,MAAMP,EAAQQ,eAE5BC,MAAO,mBAIXT,EAAQU,W,KApBNZ,EAEGK,QAAkB,mCAsBZL,QCiCAa,G,kNA9CbC,W,yDAGE,OAAOC,IAAMC,cAAc,wB,0CAK3B,IAAMC,EAAiCC,SAASC,qBAAqB,sBAAsB,GASvFC,OAAOC,aAAeD,OAAOC,YAAYC,WAC3CC,KAAKT,MAAQM,OAAOC,YAAYC,SAASR,MAR5B,CACbU,MAAO,SACPC,cAAe,QACfC,cAAe,QACfC,UAAW,UAMTJ,KAAKT,OAIPG,EAAKW,KAAKL,KAAKT,S,2CAMbS,KAAKT,OAGPS,KAAKT,MAAMe,OAAON,KAAKO,MAAMC,KAAKC,KAAI,SAACC,GAErC,MAAO,CACLT,MAAOS,EAAGT,MACVC,cAAeQ,EAAGC,SAAWD,EAAGC,QAAQC,OAAS,EACjDT,cAAeO,EAAGG,SAAWH,EAAGG,QAAQD,OAAS,EACjDR,UAAWM,EAAGN,mB,GAzCJU,cCiDLC,G,wDAxDb,WAAYR,GAAY,IAAD,8BACrB,cAAMA,IAEDS,MAAQ,CAGXR,KAAM,IANa,E,0DAcrB,OAAQ,kBAAC,EAAD,CAAOA,KAAMR,KAAKgB,MAAMR,S,0CAMb,IAAD,OAClB/B,EAAawC,SAAQ,SAACC,GAGpB,EAAKC,SAAS,CAAEX,KAAK,GAAD,mBAAM,EAAKQ,MAAMR,MAAjB,YAA0BU,W,+BAOxC,IAAD,OACP,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAAlB,0BAGA,yBAAKA,UAAU,eACb,4BAAQA,UAAU,gCAMhBC,QAAS,WAAO,EAAKC,sBANvB,wBASA,yBAAKF,UAAU,SACZpB,KAAKuB,qB,GAjDAT,c,YCHlBU,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,W","file":"static/js/main.6dcfe521.chunk.js","sourcesContent":["export interface Order {\n  price: Number,\n  size: Number,\n}\n/**\n * The datafeed server returns an array of ServerRespond with 2 stocks.\n * We do not have to manipulate the ServerRespond for the purpose of this task.\n */\nexport interface ServerRespond {\n  stock: string,\n  top_bid: Order,\n  top_ask: Order,\n  timestamp: Date,\n}\n\nclass DataStreamer {\n  // The url where datafeed server is listening\n  static API_URL: string = 'http://localhost:8080/query?id=1';\n\n  /**\n   * Send request to the datafeed server and executes callback function on success\n   * @param callback callback function that takes JSON object as its argument\n   */\n  static getData(callback: (data: ServerRespond[]) => void): void {\n    const request = new XMLHttpRequest();\n    request.open('GET', DataStreamer.API_URL, false);\n\n    request.onload = () => {\n      if (request.status === 200) {\n        callback(JSON.parse(request.responseText));\n      } else {\n        alert ('Request failed');\n      }\n    }\n\n    request.send();\n  }\n}\n\nexport default DataStreamer;","import React, { Component } from 'react';\nimport { Table } from '@jpmorganchase/perspective';\nimport { ServerRespond } from './DataStreamer';\nimport './Graph.css';\n\n/**\n * Props declaration for <Graph />\n */\ninterface IProps {\n  data: ServerRespond[],\n}\n\n/**\n * Perspective library adds load to HTMLElement prototype.\n * This interface acts as a wrapper for Typescript compiler.\n */\ninterface PerspectiveViewerElement {\n  load: (table: Table) => void,\n}\n\n/**\n * React component that renders Perspective based on data\n * parsed from its parent through data property.\n */\nclass Graph extends Component<IProps, {}> {\n  // Perspective table\n  table: Table | undefined;\n\n  render() {\n    return React.createElement('perspective-viewer');\n  }\n\n  componentDidMount() {\n    // Get element to attach the table from the DOM.\n    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\n\n    const schema = {\n      stock: 'string',\n      top_ask_price: 'float',\n      top_bid_price: 'float',\n      timestamp: 'date',\n    };\n\n    if (window.perspective && window.perspective.worker()) {\n      this.table = window.perspective.worker().table(schema);\n    }\n    if (this.table) {\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\n\n      // Add more Perspective configurations here.\n      elem.load(this.table);\n    }\n  }\n\n  componentDidUpdate() {\n    // Everytime the data props is updated, insert the data into Perspective table\n    if (this.table) {\n      // As part of the task, you need to fix the way we update the data props to\n      // avoid inserting duplicated entries into Perspective table again.\n      this.table.update(this.props.data.map((el: any) => {\n        // Format the data from ServerRespond to the schema\n        return {\n          stock: el.stock,\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\n          timestamp: el.timestamp,\n        };\n      }));\n    }\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport DataStreamer, { ServerRespond } from './DataStreamer';\nimport Graph from './Graph';\nimport './App.css';\n\n/**\n * State declaration for <App />\n */\ninterface IState {\n  data: ServerRespond[],\n}\n\n/**\n * The parent element of the react app.\n * It renders title, button and Graph react element.\n */\nclass App extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      // data saves the server responds.\n      // We use this state to parse data down to the child element (Graph) as element property\n      data: [],\n    };\n  }\n\n  /**\n   * Render Graph react component with state.data parse as property data\n   */\n  renderGraph() {\n    return (<Graph data={this.state.data}/>)\n  }\n\n  /**\n   * Get new data from server and update the state with the new data\n   */\n  getDataFromServer() {\n    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n      // Update the state by creating a new array of data that consists of\n      // Previous data in the state and the new data from server\n      this.setState({ data: [...this.state.data, ...serverResponds] });\n    });\n  }\n\n  /**\n   * Render the App react component\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Bank & Merge Co Task 2\n        </header>\n        <div className=\"App-content\">\n          <button className=\"btn btn-primary Stream-button\"\n            // when button is click, our react app tries to request\n            // new data from the server.\n            // As part of your task, update the getDataFromServer() function\n            // to keep requesting the data every 100ms until the app is closed\n            // or the server does not return anymore data.\n            onClick={() => {this.getDataFromServer()}}>\n            Start Streaming Data\n          </button>\n          <div className=\"Graph\">\n            {this.renderGraph()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\ndeclare global {\n  interface Window { perspective: any; }\n}\n\n/**\n * React App attaches the DOM to the DOM element #root in public/index.html\n */\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}